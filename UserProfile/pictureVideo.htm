<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

        <meta charset="utf-8">

        <title>jQuery webcam plugin • Code is poetry</title>

        <!-- 1363186757 -->
        <link rel="icon" href="http://www.xarg.org/favicon.ico" type="image/x-icon">
        <link rel="shortcut icon" href="http://www.xarg.org/favicon.ico" type="image/x-icon">
        <link rel="stylesheet" href="pictureVideo_files/style.css" type="text/css">

        <link rel="pingback" href="http://www.xarg.org/pingback/">

        <meta name="robots" content="index,follow">
        <meta name="ICBM" content="50.93793,14.84811">
        <meta name="blogcatalog" content="9BC9486214">
        <meta property="fb:admins" content="1522308563">
        
        <meta name="author" content="Robert Eisele">

        <meta name="description" content="">
        
        <link rel="alternate" type="application/rss+xml" title="Code is poetry" href="http://feeds.feedburner.com/exarg">
        
        <link rel="canonical" href="http://www.xarg.org/project/jquery-webcam-plugin/">

                <link rel="archives" title="Optimization tips of July 2008" href="http://www.xarg.org/2008/07/">
                <link rel="archives" title="Optimization tips of August 2008" href="http://www.xarg.org/2008/08/">
                <link rel="archives" title="Optimization tips of September 2008" href="http://www.xarg.org/2008/09/">
                <link rel="archives" title="Optimization tips of August 2009" href="http://www.xarg.org/2009/08/">
                <link rel="archives" title="Optimization tips of September 2009" href="http://www.xarg.org/2009/09/">
                <link rel="archives" title="Optimization tips of October 2009" href="http://www.xarg.org/2009/10/">
                <link rel="archives" title="Optimization tips of December 2009" href="http://www.xarg.org/2009/12/">
                <link rel="archives" title="Optimization tips of February 2010" href="http://www.xarg.org/2010/02/">
                <link rel="archives" title="Optimization tips of March 2010" href="http://www.xarg.org/2010/03/">
                <link rel="archives" title="Optimization tips of April 2010" href="http://www.xarg.org/2010/04/">
                <link rel="archives" title="Optimization tips of May 2010" href="http://www.xarg.org/2010/05/">
                <link rel="archives" title="Optimization tips of June 2010" href="http://www.xarg.org/2010/06/">
                <link rel="archives" title="Optimization tips of July 2010" href="http://www.xarg.org/2010/07/">
                <link rel="archives" title="Optimization tips of September 2010" href="http://www.xarg.org/2010/09/">
                <link rel="archives" title="Optimization tips of November 2010" href="http://www.xarg.org/2010/11/">
                <link rel="archives" title="Optimization tips of January 2011" href="http://www.xarg.org/2011/01/">
                <link rel="archives" title="Optimization tips of June 2011" href="http://www.xarg.org/2011/06/">
                <link rel="archives" title="Optimization tips of September 2011" href="http://www.xarg.org/2011/09/">
                <link rel="archives" title="Optimization tips of October 2011" href="http://www.xarg.org/2011/10/">
                <link rel="archives" title="Optimization tips of July 2012" href="http://www.xarg.org/2012/07/">
                <link rel="archives" title="Optimization tips of August 2012" href="http://www.xarg.org/2012/08/">
        
    <script src="pictureVideo_files/ga.js" async="" type="text/javascript"></script><script>
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-1101037-2"]);
_gaq.push(["_trackPageview"]);

(function() {
var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script></head>

    <body>

        <header>

            <div class="wrap">

                <div id="xname">
                    <a href="http://www.xarg.org/" rel="top">Robert Eisele</a><br>
                    <span>Systems Engineer, Architect and DBA</span>
                </div>

                <nav>
                    <ul>
                        <li><a href="http://www.xarg.org/about/" rel="author">About</a></li>
                        <li><a href="http://www.xarg.org/archive/" rel="archive">Archive</a></li>
                        <li><a href="http://www.xarg.org/projects/" rel="contents">Projects</a></li>
                        <li><a href="http://www.xarg.org/contact/" rel="help">Contact</a></li>
                    </ul>
                </nav>
                <div class="clear"></div>

            </div>

        </header>

        <div id="main">

            <div class="wrap">

            <script src="pictureVideo_files/jquery-1.js"></script>
        
    <div id="left">

        <article>
            <h1><a href="http://www.xarg.org/project/jquery-webcam-plugin/" rel="bookmark">jQuery webcam plugin</a></h1>
       
          
<style type="text/css">

#webcam, #canvas {
	width: 320px;
	border:20px solid #333;
	background:#eee;
	-webkit-border-radius: 20px;
	-moz-border-radius: 20px;
	border-radius: 20px;
}

#webcam {
	position:relative;
	margin-top:50px;
	margin-bottom:50px;
}

#webcam > span {
	z-index:2;
	position:absolute;
	color:#eee;
	font-size:10px;
	bottom: -16px;
	left:152px;
}

#webcam > img {
	z-index:1;
	position:absolute;
	border:0px none;
	padding:0px;
	bottom:-40px;
	left:89px;
}

#webcam > div {
	border:5px solid #333;
	position:absolute;
	right:-90px;
	padding:5px;
	-webkit-border-radius: 8px;
	-moz-border-radius: 8px;
	border-radius: 8px;
	cursor:pointer;
}

#webcam a {
	background:#fff;
	font-weight:bold;
}

#webcam a > img {
	border:0px none;
}

#canvas {
	border:20px solid #ccc;
	background:#eee;
}

#flash {
	position:absolute;
	top:0px;
	left:0px;
	z-index:5000;
	width:100%;
	height:500px;
	background-color:#c00;
	display:none;
}

object {
	display:block; /* HTML5 fix */
	position:relative;
	z-index:1000;
}

</style>

<script type="text/javascript" src="pictureVideo_files/jquery.js"></script>

<p>The jQuery webcam plugin is a transparent layer to communicate with a camera directly in JavaScript.</p>

<h2>Overview</h2>
<p>This plugin provides three different modes to access a webcam through a small <abbr title="Application Programming Interface">API</abbr>
 directly with JavaScript - or more precisely jQuery. Thus, it is 
possible to bring the image on a Canvas (callback mode), to store the 
image on the server (save mode) and to stream the live image of the 
Flash element on a Canvas (stream mode). If you just want to download 
the plugin, click here:</p>
<div class="button"><a href="https://github.com/infusion/jQuery-webcam" class="view">Download the jQuery webcam plugin</a></div>

<h2>jQuery webcam example</h2>

<p id="status" style="height:22px; color:#c00;font-weight:bold;"></p>

<div id="webcam">
	<img src="pictureVideo_files/antenna.png" alt="">
	<span>jQuery</span>
	<div><a onclick="toggleFilter(this);"><img src="pictureVideo_files/icon_filter.png" alt=""></a></div>
<object id="XwebcamXobjectX" type="application/x-shockwave-flash" data="pictureVideo_files/jscam_canvas_only.swf" height="240" width="320"><param name="movie" value="/download/jscam_canvas_only.swf"><param name="FlashVars" value="mode=callback&amp;quality=85"><param name="allowScriptAccess" value="always"></object></div>

<p style="width:360px;text-align:center;font-size:12px"><a href="javascript:webcam.capture(3);changeFilter();void(0);">Take a picture after 3 seconds</a> | <a href="javascript:webcam.capture();changeFilter();void(0);">Take a picture instantly</a></p>

<p><canvas id="canvas" height="240" width="320"></canvas></p>

<h3>Available Cameras</h3>

<ul id="cams"><li>CyberLink Webcam Splitter</li><li>HP Truevision HD</li></ul>

<script type="text/javascript">

var pos = 0;
var ctx = null;
var cam = null;
var image = null;

var filter_on = false;
var filter_id = 0;

function changeFilter() {
	if (filter_on) {
		filter_id = (filter_id + 1) & 7;
	}
}

function toggleFilter(obj) {
	if (filter_on =!filter_on) {
		obj.parentNode.style.borderColor = "#c00";
	} else {
		obj.parentNode.style.borderColor = "#333";
	}
}

jQuery("#webcam").webcam({

	width: 320,
	height: 240,
	mode: "callback",
	swffile: "/download/jscam_canvas_only.swf",

	onTick: function(remain) {

		if (0 == remain) {
			jQuery("#status").text("Cheese!");
		} else {
			jQuery("#status").text(remain + " seconds remaining...");
		}
	},

	onSave: function(data) {

		var col = data.split(";");
		var img = image;

		if (false == filter_on) {

			for(var i = 0; i < 320; i++) {
				var tmp = parseInt(col[i]);
				img.data[pos + 0] = (tmp >> 16) & 0xff;
				img.data[pos + 1] = (tmp >> 8) & 0xff;
				img.data[pos + 2] = tmp & 0xff;
				img.data[pos + 3] = 0xff;
				pos+= 4;
			}

		} else {

			var id = filter_id;
			var r,g,b;
			var r1 = Math.floor(Math.random() * 255);
			var r2 = Math.floor(Math.random() * 255);
			var r3 = Math.floor(Math.random() * 255);

			for(var i = 0; i < 320; i++) {
				var tmp = parseInt(col[i]);

				/* Copied some xcolor methods here to be faster than calling all methods inside of xcolor and to not serve complete library with every req */

				if (id == 0) {
					r = (tmp >> 16) & 0xff;
					g = 0xff;
					b = 0xff;
				} else if (id == 1) {
					r = 0xff;
					g = (tmp >> 8) & 0xff;
					b = 0xff;
				} else if (id == 2) {
					r = 0xff;
					g = 0xff;
					b = tmp & 0xff;
				} else if (id == 3) {
					r = 0xff ^ ((tmp >> 16) & 0xff);
					g = 0xff ^ ((tmp >> 8) & 0xff);
					b = 0xff ^ (tmp & 0xff);
				} else if (id == 4) {

					r = (tmp >> 16) & 0xff;
					g = (tmp >> 8) & 0xff;
					b = tmp & 0xff;
					var v = Math.min(Math.floor(.35 + 13 * (r + g + b) / 60), 255);
					r = v;
					g = v;
					b = v;
				} else if (id == 5) {
					r = (tmp >> 16) & 0xff;
					g = (tmp >> 8) & 0xff;
					b = tmp & 0xff;
					if ((r+= 32) < 0) r = 0;
					if ((g+= 32) < 0) g = 0;
					if ((b+= 32) < 0) b = 0;
				} else if (id == 6) {
					r = (tmp >> 16) & 0xff;
					g = (tmp >> 8) & 0xff;
					b = tmp & 0xff;
					if ((r-= 32) < 0) r = 0;
					if ((g-= 32) < 0) g = 0;
					if ((b-= 32) < 0) b = 0;
				} else if (id == 7) {
					r = (tmp >> 16) & 0xff;
					g = (tmp >> 8) & 0xff;
					b = tmp & 0xff;
					r = Math.floor(r / 255 * r1);
					g = Math.floor(g / 255 * r2);
					b = Math.floor(b / 255 * r3);
				}

				img.data[pos + 0] = r;
				img.data[pos + 1] = g;
				img.data[pos + 2] = b;
				img.data[pos + 3] = 0xff;
				pos+= 4;
			}
		}

		if (pos >= 0x4B000) {
			ctx.putImageData(img, 0, 0);
			pos = 0;
		}
	},

	onCapture: function () {
		webcam.save();

		jQuery("#flash").css("display", "block");
		jQuery("#flash").fadeOut(100, function () {
			jQuery("#flash").css("opacity", 1);
		});
	},

	debug: function (type, string) {
		jQuery("#status").html(type + ": " + string);
	},

	onLoad: function () {

		var cams = webcam.getCameraList();
		for(var i in cams) {
			jQuery("#cams").append("<li>" + cams[i] + "</li>");
		}
	}
});

function getPageSize() {

	var xScroll, yScroll;

	if (window.innerHeight && window.scrollMaxY) {
		xScroll = window.innerWidth + window.scrollMaxX;
		yScroll = window.innerHeight + window.scrollMaxY;
	} else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac
		xScroll = document.body.scrollWidth;
		yScroll = document.body.scrollHeight;
	} else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari
		xScroll = document.body.offsetWidth;
		yScroll = document.body.offsetHeight;
	}

	var windowWidth, windowHeight;

	if (self.innerHeight) { // all except Explorer
		if(document.documentElement.clientWidth){
			windowWidth = document.documentElement.clientWidth;
		} else {
			windowWidth = self.innerWidth;
		}
		windowHeight = self.innerHeight;
	} else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode
		windowWidth = document.documentElement.clientWidth;
		windowHeight = document.documentElement.clientHeight;
	} else if (document.body) { // other Explorers
		windowWidth = document.body.clientWidth;
		windowHeight = document.body.clientHeight;
	}

	// for small pages with total height less then height of the viewport
	if(yScroll < windowHeight){
		pageHeight = windowHeight;
	} else {
		pageHeight = yScroll;
	}

	// for small pages with total width less then width of the viewport
	if(xScroll < windowWidth){
		pageWidth = xScroll;
	} else {
		pageWidth = windowWidth;
	}

	return [pageWidth, pageHeight];
}

window.addEventListener("load", function() {

	jQuery("body").append("<div id=\"flash\"></div>");

	var canvas = document.getElementById("canvas");

	if (canvas.getContext) {
		ctx = document.getElementById("canvas").getContext("2d");
		ctx.clearRect(0, 0, 320, 240);

		var img = new Image();
		img.src = "/image/logo.gif";
		img.onload = function() {
			ctx.drawImage(img, 129, 89);
		}
		image = ctx.getImageData(0, 0, 320, 240);
	}
	
	var pageSize = getPageSize();
	jQuery("#flash").css({ height: pageSize[1] + "px" });

}, false);

window.addEventListener("resize", function() {

	var pageSize = getPageSize();
	jQuery("#flash").css({ height: pageSize[1] + "px" });

}, false);

</script>

<p>If you activate the filter with the button on the right side of the picture, methods of my already published <a href="http://www.xarg.org/project/jquery-color-plugin-xcolor/">jQuery plugin xcolor</a> will be used to distort the colors of the Canvas.</p>

<h2>General information about the interface</h2>

<p>The following snippet describes the interface of the webcam API:</p>

<pre class="prettyprint"><span class="pln">$</span><span class="pun">(</span><span class="str">"#camera"</span><span class="pun">).</span><span class="pln">webcam</span><span class="pun">({</span><span class="pln">
	width</span><span class="pun">:</span><span class="pln"> </span><span class="lit">320</span><span class="pun">,</span><span class="pln">
	height</span><span class="pun">:</span><span class="pln"> </span><span class="lit">240</span><span class="pun">,</span><span class="pln">
	mode</span><span class="pun">:</span><span class="pln"> </span><span class="str">"callback"</span><span class="pun">,</span><span class="pln">
	swffile</span><span class="pun">:</span><span class="pln"> </span><span class="str">"/download/jscam_canvas_only.swf"</span><span class="pun">,</span><span class="pln">
	onTick</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{},</span><span class="pln">
	onSave</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{},</span><span class="pln">
	onCapture</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{},</span><span class="pln">
	debug</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{},</span><span class="pln">
	onLoad</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
</span><span class="pun">});</span></pre>

<h3>Config Parameter</h3>

<p><strong>width</strong><br>
The width of the flash movie.
</p>
<p><strong>height</strong><br>
The height of the flash movie. Both parameters have to be changed in the
 Flash file as well. Follow the instructions below to recompile the swf 
after the size change.
</p>
<p><strong>mode</strong><br>
The storage mode can be one of the following: <em>callback</em>, <em>save</em>, <em>stream</em>. Details about the usage of each parameter can be found under the according heading below.
</p>
<p><strong>swffile</strong><br>
Points to the swf file of the Flash movie, which provides the webcam 
API. There are two swf files provided via the download archive: <strong>jscam.swf</strong>, which provides the full API and  <strong>jscam_canvas_only.swf</strong> which have no embedded JPEG library (I embedded an adjusted JPGEncoder of the <a href="http://code.google.com/p/as3corelib/">AS 3 corelib</a>). Thereby, the file is only one third as large as the original.</p>
<p><strong>onTick</strong>, <strong>onSave</strong>, <strong>onCapture</strong><br>
These callbacks are described in detail below, since they change with each mode.
</p>

<p><strong>onLoad</strong><br>
The <em>onLoad</em> callback is called as soon as the registration of 
the interface is done. In the example above, I use the callback to get a
 list of all cameras available:
</p>
<pre class="prettyprint"><span class="pln">onLoad</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">var</span><span class="pln"> cams </span><span class="pun">=</span><span class="pln"> webcam</span><span class="pun">.</span><span class="pln">getCameraList</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="kwd">in</span><span class="pln"> cams</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        jQuery</span><span class="pun">(</span><span class="str">"#cams"</span><span class="pun">).</span><span class="pln">append</span><span class="pun">(</span><span class="str">"&lt;li&gt;"</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> cams</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">"&lt;/li&gt;"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>
<p>Once the <em>onLoad</em> callback is called, a global object <strong>window.webcam</strong> is available, which provides the following methods:</p>
<ul>
<li><strong>capture(<em>[delay]</em>)</strong><br>Captures an image internally.</li>
<li><strong>save(<em>[file]</em>)</strong><br>Saves the captured image accordingly to the storage mode.</li>
<li><strong>getCameraList()</strong><br>Get's an array of available cameras. If no camera is installed, an error is thrown and an empty array is returned.</li>
<li><strong>setCamera(<em>[index]</em>)</strong><br>Switches to a different camera. The parameter is the index of the element in the resulting array of <em>getCameraList()</em></li>
</ul>
<p><strong>debug</strong><br>
The <em>debug</em> callback is called whenever there is a note or an 
error you should be notified. In the example above, I just replace the 
html content of the output container:
</p>
<pre class="prettyprint"><span class="pln">debug</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	$</span><span class="pun">(</span><span class="str">"#status"</span><span class="pun">).</span><span class="pln">html</span><span class="pun">(</span><span class="pln">type </span><span class="pun">+</span><span class="pln"> </span><span class="str">": "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></pre>

<h2>Callback Interface</h2>

<p>The callback mode is used to get the raw data via a callback method 
to write it on a canvas element for example. The example above uses the 
callback mode.</p>

<p>As for the processing, one can imagine how it works as follows: Once 
the user has completely loaded the entire page and has accepted the 
security setting of Flash, she should be able to see herself. Then, the 
user triggers the method <em>window.capture()</em>. This may optionally 
receive a parameter that specifies the time to wait until the image is 
shot. To view the passage of time, the method <em>onTick()</em> is 
called after every second. The received parameter of this method is the 
amount of seconds remaining. In the example above, I simply change the 
status message like this:</p>

<pre class="prettyprint"><span class="pln">onTick</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">remain</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="lit">0</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> remain</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        jQuery</span><span class="pun">(</span><span class="str">"#status"</span><span class="pun">).</span><span class="pln">text</span><span class="pun">(</span><span class="str">"Cheese!"</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        jQuery</span><span class="pun">(</span><span class="str">"#status"</span><span class="pun">).</span><span class="pln">text</span><span class="pun">(</span><span class="pln">remain </span><span class="pun">+</span><span class="pln"> </span><span class="str">" seconds remaining..."</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>

<p>Is copying finished, the <em>onCapture</em> callback is called, which in the example of above immediately calls the method <em>webcam.save()</em> to ultimately write the image to the canvas. The sample code also contains a small gimmick to <strong>simulate a flash</strong> using a lightbox and jQuery's <em>fadeOut()</em> fx method.</p>

<pre class="prettyprint"><span class="pln">onCapture</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

	jQuery</span><span class="pun">(</span><span class="str">"#flash"</span><span class="pun">).</span><span class="pln">css</span><span class="pun">(</span><span class="str">"display"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"block"</span><span class="pun">);</span><span class="pln">
	jQuery</span><span class="pun">(</span><span class="str">"#flash"</span><span class="pun">).</span><span class="pln">fadeOut</span><span class="pun">(</span><span class="str">"fast"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
		jQuery</span><span class="pun">(</span><span class="str">"#flash"</span><span class="pun">).</span><span class="pln">css</span><span class="pun">(</span><span class="str">"opacity"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
	</span><span class="pun">});</span><span class="pln">

	webcam</span><span class="pun">.</span><span class="pln">save</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></pre>

<p>In callback mode, for every line the callback <em>onSave()</em> is 
invoked, which gets an integer CSV of color values (separator is the 
semicolon). To write the data on the canvas, I use the following method 
in the example above:</p>

<pre class="prettyprint"><span class="pln">onSave</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">data</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

    </span><span class="kwd">var</span><span class="pln"> col </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">split</span><span class="pun">(</span><span class="str">";"</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> img </span><span class="pun">=</span><span class="pln"> image</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">320</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> tmp </span><span class="pun">=</span><span class="pln"> parseInt</span><span class="pun">(</span><span class="pln">col</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span><span class="pln">
        img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tmp </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">16</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tmp </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> tmp </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
        pos</span><span class="pun">+=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pos </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">320</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">240</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        ctx</span><span class="pun">.</span><span class="pln">putImageData</span><span class="pun">(</span><span class="pln">img</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        pos </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></pre>

<h2>Save Interface</h2>
<p>From the view of processing, the save mode is almost identical to the callback mode. The only difference is that the <em>webcam.save()</em> method get's the file name passed as parameter. Then the shot photo is sent via <strong>HTTP_RAW_POST_DATA</strong>
 to the server and can be read for example with the following snippet to
 store or further process it in any way (Warning, input validation is 
not considered here!).</p>

<pre class="prettyprint"><span class="pln">webcam</span><span class="pun">.</span><span class="pln">save</span><span class="pun">(</span><span class="str">'/upload.php'</span><span class="pun">);</span></pre>

<p>And on the server side, you get the image like this:</p>

<pre class="prettyprint"><span class="pun">&lt;?</span><span class="pln">php

$str </span><span class="pun">=</span><span class="pln"> file_get_contents</span><span class="pun">(</span><span class="str">"php://input"</span><span class="pun">);</span><span class="pln">
file_put_contents</span><span class="pun">(</span><span class="str">"/tmp/upload.jpg"</span><span class="pun">,</span><span class="pln"> pack</span><span class="pun">(</span><span class="str">"H*"</span><span class="pun">,</span><span class="pln"> $str</span><span class="pun">));</span><span class="pln">

</span><span class="pun">?&gt;</span></pre>

<h3>Alternative method to the upload via Flash</h3>

<p>The Flash method has several problems. The implementation can lock 
the entire Flash movie and in the worst case the whole browser until the
 picture was uploaded sucessfully. A better approach is Ajax to upload 
the image asynchronously. Take a look at this example. It uploads a 
simple picture CSV if canvas elements are not implemented in the browser
 and sends a data url formatted string otherwise:</p>

<pre class="prettyprint"><span class="pln">$</span><span class="pun">(</span><span class="kwd">function</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

	</span><span class="kwd">var</span><span class="pln"> pos </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> ctx </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> saveCB</span><span class="pun">,</span><span class="pln"> image </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln">

	</span><span class="kwd">var</span><span class="pln"> canvas </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">"canvas"</span><span class="pun">);</span><span class="pln">
	canvas</span><span class="pun">.</span><span class="pln">setAttribute</span><span class="pun">(</span><span class="str">'width'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">320</span><span class="pun">);</span><span class="pln">
	canvas</span><span class="pun">.</span><span class="pln">setAttribute</span><span class="pun">(</span><span class="str">'height'</span><span class="pun">,</span><span class="pln"> </span><span class="lit">240</span><span class="pun">);</span><span class="pln">
	
	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">canvas</span><span class="pun">.</span><span class="pln">toDataURL</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

		ctx </span><span class="pun">=</span><span class="pln"> canvas</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">(</span><span class="str">"2d"</span><span class="pun">);</span><span class="pln">
		
		image </span><span class="pun">=</span><span class="pln"> ctx</span><span class="pun">.</span><span class="pln">getImageData</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">320</span><span class="pun">,</span><span class="pln"> </span><span class="lit">240</span><span class="pun">);</span><span class="pln">
	
		saveCB </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">data</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
			
			</span><span class="kwd">var</span><span class="pln"> col </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">split</span><span class="pun">(</span><span class="str">";"</span><span class="pun">);</span><span class="pln">
			</span><span class="kwd">var</span><span class="pln"> img </span><span class="pun">=</span><span class="pln"> image</span><span class="pun">;</span><span class="pln">

			</span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">320</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
				</span><span class="kwd">var</span><span class="pln"> tmp </span><span class="pun">=</span><span class="pln"> parseInt</span><span class="pun">(</span><span class="pln">col</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span><span class="pln">
				img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tmp </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">16</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
				img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tmp </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
				img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> tmp </span><span class="pun">&amp;</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
				img</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="pln">pos </span><span class="pun">+</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0xff</span><span class="pun">;</span><span class="pln">
				pos</span><span class="pun">+=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">;</span><span class="pln">
			</span><span class="pun">}</span><span class="pln">

			</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pos </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">320</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">240</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
				ctx</span><span class="pun">.</span><span class="pln">putImageData</span><span class="pun">(</span><span class="pln">img</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
				$</span><span class="pun">.</span><span class="pln">post</span><span class="pun">(</span><span class="str">"/upload.php"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">type</span><span class="pun">:</span><span class="pln"> </span><span class="str">"data"</span><span class="pun">,</span><span class="pln"> image</span><span class="pun">:</span><span class="pln"> canvas</span><span class="pun">.</span><span class="pln">toDataURL</span><span class="pun">(</span><span class="str">"image/png"</span><span class="pun">)});</span><span class="pln">
				pos </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
			</span><span class="pun">}</span><span class="pln">
		</span><span class="pun">};</span><span class="pln">

	</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

		saveCB </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">data</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
			image</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">data</span><span class="pun">);</span><span class="pln">
			
			pos</span><span class="pun">+=</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">320</span><span class="pun">;</span><span class="pln">
			
			</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pos </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">320</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">240</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
				$</span><span class="pun">.</span><span class="pln">post</span><span class="pun">(</span><span class="str">"/upload.php"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln">type</span><span class="pun">:</span><span class="pln"> </span><span class="str">"pixel"</span><span class="pun">,</span><span class="pln"> image</span><span class="pun">:</span><span class="pln"> image</span><span class="pun">.</span><span class="pln">join</span><span class="pun">(</span><span class="str">'|'</span><span class="pun">)});</span><span class="pln">
				pos </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
			</span><span class="pun">}</span><span class="pln">
		</span><span class="pun">};</span><span class="pln">
	</span><span class="pun">}</span><span class="pln">

	$</span><span class="pun">(</span><span class="str">"#webcam"</span><span class="pun">).</span><span class="pln">webcam</span><span class="pun">({</span><span class="pln">

		width</span><span class="pun">:</span><span class="pln"> </span><span class="lit">320</span><span class="pun">,</span><span class="pln">
		height</span><span class="pun">:</span><span class="pln"> </span><span class="lit">240</span><span class="pun">,</span><span class="pln">
		mode</span><span class="pun">:</span><span class="pln"> </span><span class="str">"callback"</span><span class="pun">,</span><span class="pln">
		swffile</span><span class="pun">:</span><span class="pln"> </span><span class="str">"/download/jscam_canvas_only.swf"</span><span class="pun">,</span><span class="pln">

		onSave</span><span class="pun">:</span><span class="pln"> saveCB</span><span class="pun">,</span><span class="pln">

		onCapture</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
			webcam</span><span class="pun">.</span><span class="pln">save</span><span class="pun">();</span><span class="pln">
		</span><span class="pun">},</span><span class="pln">

		debug</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">type</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
			console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">type </span><span class="pun">+</span><span class="pln"> </span><span class="str">": "</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">);</span><span class="pln">
		</span><span class="pun">}</span><span class="pln">
	</span><span class="pun">});</span><span class="pln">

</span><span class="pun">});</span></pre>

<p>The server could then do something like this:</p>

<pre class="prettyprint"><span class="pun">&lt;?</span><span class="pln">php

</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'type'</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="str">"pixel"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	</span><span class="com">// input is in format 1,2,3...|1,2,3...|...</span><span class="pln">
	$im </span><span class="pun">=</span><span class="pln"> imagecreatetruecolor</span><span class="pun">(</span><span class="lit">320</span><span class="pun">,</span><span class="pln"> </span><span class="lit">240</span><span class="pun">);</span><span class="pln">

	</span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="pln">explode</span><span class="pun">(</span><span class="str">"|"</span><span class="pun">,</span><span class="pln"> $_POST</span><span class="pun">[</span><span class="str">'image'</span><span class="pun">])</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> $y </span><span class="pun">=&gt;</span><span class="pln"> $csv</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
		</span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="pln">explode</span><span class="pun">(</span><span class="str">";"</span><span class="pun">,</span><span class="pln"> $csv</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> $x </span><span class="pun">=&gt;</span><span class="pln"> $color</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
			imagesetpixel</span><span class="pun">(</span><span class="pln">$im</span><span class="pun">,</span><span class="pln"> $x</span><span class="pun">,</span><span class="pln"> $y</span><span class="pun">,</span><span class="pln"> $color</span><span class="pun">);</span><span class="pln">
		</span><span class="pun">}</span><span class="pln">
	</span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
	</span><span class="com">// input is in format: data:image/png;base64,...</span><span class="pln">
	$im </span><span class="pun">=</span><span class="pln"> imagecreatefrompng</span><span class="pun">(</span><span class="pln">$_POST</span><span class="pun">[</span><span class="str">'image'</span><span class="pun">]);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// do something with $im</span><span class="pln">

</span><span class="pun">?&gt;</span></pre>

<h2>Stream interface</h2>
<p>The stream mode is also quite the same procedure as the callback mode, with the difference that the <em>onSave</em> callback is called non-stop. The streaming starts with the method <em>webcam.capture()</em>. The <em>webcam.save()</em> method has no further effect.</p>

<h2>Recompile the Flash binary</h2>
<p>If you've made changes to the code or did just adjust the size of the
 video in the XML specification file, you can easily recompile the swf 
file from Linux console with the provided Makefile. You are required to 
install the two open source projects <strong>swfmill</strong> and <strong>mtasc</strong> that can be easily installed using apt-get under Debian/Ubuntu:</p>
<pre>apt-get install swfmill mtasc
vim src/jscam.xml
make</pre>
<h3>Hint about empty screens after recompilation</h3>
<p>There is a bug in the current version of swfmill. Please try to downgrade swfmill to <strong>2.0.12</strong>, which fixes the issue!</p> 
            
        </article>

    </div>

    <div id="right">

            <div id="xfacebook"><iframe src="pictureVideo_files/likebox.htm" style="border:none; overflow:hidden; width:292px; height:62px;" allowtransparency="true" frameborder="0" scrolling="no"></iframe></div>

    
    
<h2 style="padding-top:30px;">Don't miss xarg Stuff!</h2>
<ul>
                        <li><a href="http://feeds.feedburner.com/exarg" rel="nofollow,me"><img src="pictureVideo_files/rss-icon.png" alt="RSS"></a></li>
                        <li><a href="https://github.com/infusion" rel="nofollow,me"><img src="pictureVideo_files/github-icon.jpg" alt="Github"></a></li>
                        <li><a href="http://twitter.com/roberteisele" rel="nofollow,me"><img src="pictureVideo_files/twitter-icon.png" alt="Twitter"></a></li>

</ul>

    </div>

    <div class="clear"></div>

        <script type="text/javascript" src="pictureVideo_files/prettify.js"></script>
    
    <script>

    window.onload = function() {
        prettyPrint();
    }
    </script>
    
                    </div>

        </div>

        <footer>

            <div class="wrap">
                © 2008 ‐ 2013 Robert Eisele All rights reserved. 
            </div>

        </footer>
            <script src="pictureVideo_files/default.js"></script>
    


<div style="height: 6383px;" id="flash"></div></body></html>